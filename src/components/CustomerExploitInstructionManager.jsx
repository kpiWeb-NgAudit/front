// src/components/CustomerExploitInstructionManager.jsx
import React, { useState, useEffect, useCallback } from 'react';
import {
    getAllExploitInstructions,
    createExploitInstruction,
    updateExploitInstruction,
    deleteExploitInstruction
} from '../api/exploitInstructionService';
import ExploitInstructionList from './ExploitInstructionList';
import ExploitInstructionForm from './ExploitInstructionForm';

const CustomerExploitInstructionManager = ({ customerId }) => {
    const [instructions, setInstructions] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [showForm, setShowForm] = useState(false);
    const [editingInstruction, setEditingInstruction] = useState(null);

    const fetchInstructions = useCallback(async () => {
        if (!customerId) { setInstructions([]); setLoading(false); return; }
        setLoading(true); setError(null);
        try {
            const response = await getAllExploitInstructions({ cubeIdPk: customerId, pageSize: 200 });
            setInstructions(response.data || []);
        } catch (err) {
            setError(err.message || "Failed to load instructions.");
        } finally {
            setLoading(false);
        }
    }, [customerId]);

    useEffect(() => {
        fetchInstructions();
    }, [fetchInstructions]);

    const handleAddOrUpdate = async (formDataFromSubForm) => {
        try {
            if (editingInstruction) {
                await updateExploitInstruction(editingInstruction.ExpInsIdPk, formDataFromSubForm);
                alert('Instruction updated!');
            } else {
                const dataToCreate = { ...formDataFromSubForm, CubeIdPk: customerId };
                await createExploitInstruction(dataToCreate);
                alert('Instruction added!');
            }
            setShowForm(false);
            setEditingInstruction(null);
            fetchInstructions();
        } catch (error) {
            throw error; // Let form display errors
        }
    };

    const handleDelete = async (instructionIdPk) => {
        if (!window.confirm(`Delete Instruction ID ${instructionIdPk}?`)) return;
        try {
            await deleteExploitInstruction(instructionIdPk);
            alert('Instruction deleted.');
            fetchInstructions();
        } catch (err) {
            alert(`Error: ${err.response?.data?.message || err.message}`);
        }
    };

    const openEditForm = (instruction) => {
        // Map entity to form's initialData structure (PascalCase)
        setEditingInstruction({
            ExpInsIdPk: instruction.expInsIdPk,
            ExpInsType: instruction.expInsType,
            ExpInsSpePlace: instruction.expInsSpePlace,
            ExpInsAntePostSpe: instruction.expInsAntePostSpe,
            ExpInsSortOrder: instruction.expInsSortOrder,
            ExpInsActive: instruction.expInsActive,
            ExpInsObjectMessage: instruction.expInsObjectMessage,
            ExpInsTextMessage: instruction.expInsTextMessage,
            ExpInsSendTo: instruction.expInsSendTo,
            ExpInsCopyTo: instruction.expInsCopyTo,
            ExpInsNbLinesTrigger: instruction.expInsNbLinesTrigger,
            ExpInsTextSqlResult: instruction.expInsTextSqlResult,
            ExpInsAttachResult: instruction.expInsAttachResult,
            ExpInsSqlInstruction: instruction.expInsSqlInstruction,
            CubeIdPk: instruction.cubeIdPk, // Should match customerId
            ExpInsComments: instruction.expInsComments,
            ExpInsTimestamp: instruction.expInsTimestamp
        });
        setShowForm(true);
    };

    const openAddForm = () => {
        setEditingInstruction(null);
        setShowForm(true);
    };

    if (!customerId) return <p>Customer ID required.</p>;

    return (
        <div className="customer-exploit-instruction-manager" style={{ marginTop: '20px', borderTop: '1px solid #ccc', paddingTop: '10px' }}>
            <h3>Exploit Instructions for Customer: {customerId}</h3>
            {!showForm && (
                <button className="primary" onClick={openAddForm} style={{ marginBottom: '10px' }}>
                    Add New Instruction
                </button>
            )}
            {showForm && (
                <ExploitInstructionForm
                    onSubmit={handleAddOrUpdate}
                    onCancel={() => { setShowForm(false); setEditingInstruction(null); }}
                    initialData={editingInstruction || {}} // Pass empty for add
                    parentCubeIdPk={customerId}
                    isEditMode={!!editingInstruction}
                />
            )}
            <ExploitInstructionList
                instructions={instructions}
                onEdit={openEditForm}
                onDelete={handleDelete}
                loading={loading}
                error={error}
            />
        </div>
    );
};

export default CustomerExploitInstructionManager;