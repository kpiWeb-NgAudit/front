// src/pages/AddExploitInstructionPage.jsx
import React, {useMemo} from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import ExploitInstructionForm from '../components/ExploitInstructionForm';
import { createExploitInstruction } from '../api/exploitInstructionService';

function AddExploitInstructionPage() {
    const navigate = useNavigate();
    const [searchParams] = useSearchParams();
    const preselectedCubeIdPk = searchParams.get('cubeIdPk');
    const stableEmptyInitialData = useMemo(() => ({}), []); // Stable empty object

    const handleAddInstruction = async (instructionData) => {
        try {
            const newInstruction = await createExploitInstruction(instructionData);
            alert(`Instruction (ID: ${newInstruction.expInsIdPk || instructionData.ExpInsIdPk}) created successfully!`);
            navigate(instructionData.CubeIdPk ? `/exploit-instructions?cubeIdPk=${instructionData.CubeIdPk}` : '/exploit-instructions');
        } catch (error) {
            alert(`Error: ${error.response?.data?.message || error.response?.data?.title || error.message}`);
            throw error; // For form to handle
        }
    };

    return (
        <div>
            <h2>Add New Exploit Instruction</h2>
            <ExploitInstructionForm
                onSubmit={handleAddInstruction}
                onCancel={() => navigate(preselectedCubeIdPk ? `/exploit-instructions?cubeIdPk=${preselectedCubeIdPk}` : '/exploit-instructions')}
                isEditMode={false}
                initialData={stableEmptyInitialData} // Use stable reference for create mode
                parentCubeIdPk={preselectedCubeIdPk} // Pass to pre-select customer if coming from filtered list
            />
        </div>
    );
}
export default AddExploitInstructionPage;