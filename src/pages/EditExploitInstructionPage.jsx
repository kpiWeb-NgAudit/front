// src/pages/EditExploitInstructionPage.jsx
import React, { useEffect, useState, useCallback } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import ExploitInstructionForm from '../components/ExploitInstructionForm';
import { getExploitInstructionById, updateExploitInstruction } from '../api/exploitInstructionService';

function EditExploitInstructionPage() {
    const navigate = useNavigate();
    const { id } = useParams(); // Instruction ID
    const [instruction, setInstruction] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const numericId = parseInt(id);

    const fetchInstruction = useCallback(async () => {
        if (isNaN(numericId)) { setError(new Error("Invalid ID.")); setLoading(false); return; }
        setLoading(true); setError(null);
        try {
            const data = await getExploitInstructionById(numericId);
            setInstruction(data);
        } catch (err) { setError(err.message || "Failed to load."); }
        finally { setLoading(false); }
    }, [numericId]);

    useEffect(() => { fetchInstruction(); }, [fetchInstruction]);

    const handleUpdateInstruction = async (instructionData) => {
        if (isNaN(numericId)) return Promise.reject(new Error("Invalid ID"));
        try {
            const updatedData = await updateExploitInstruction(numericId, instructionData);
            alert(`Instruction (ID: ${updatedData.expInsIdPk || numericId}) updated.`);
            navigate(instructionData.CubeIdPk ? `/exploit-instructions?cubeIdPk=${instructionData.CubeIdPk}` : '/exploit-instructions');
        } catch (error) {
            alert(`Error: ${error.response?.data?.message || error.message}`);
            throw error;
        }
    };

    if (loading) return <p>Loading instruction data...</p>;
    if (error) return <p className="error-message">Error: {error}</p>;
    if (!instruction && !loading) return <p>Instruction not found.</p>;
    if (!instruction) return null;

    return (
        <div>
            <h2>Edit Exploit Instruction (ID: {instruction.expInsIdPk})</h2>
            <ExploitInstructionForm
                onSubmit={handleUpdateInstruction}
                onCancel={() => navigate(instruction.cubeIdPk ? `/exploit-instructions?cubeIdPk=${instruction.cubeIdPk}` : '/exploit-instructions')}
                initialData={instruction}
                isEditMode={true}
                parentCubeIdPk={instruction.cubeIdPk} // Pass for context
            />
            {/* If instructions have further sub-details, manage them here */}
        </div>
    );
}
export default EditExploitInstructionPage;