// src/pages/ExploitInstructionListPage.jsx
import React, { useEffect, useState, useCallback } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { getAllExploitInstructions, deleteExploitInstruction as apiDelete } from '../api/exploitInstructionService';
import { getAllCustomers } from '../api/customerService';
import { EXP_INS_TYPES, EXP_INS_SPE_PLACES, getDropdownOptions } from '../constants/exploitInstructionEnums';
import ExploitInstructionList from '../components/ExploitInstructionList'; // Your existing list component

function ExploitInstructionListPage() {
    const navigate = useNavigate();
    const [searchParams, setSearchParams] = useSearchParams();

    const [instructions, setInstructions] = useState([]);
    const [customers, setCustomers] = useState([]); // For customer filter
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // Filter states
    const [selectedCubeId, setSelectedCubeId] = useState(searchParams.get('cubeIdPk') || '');
    const [selectedType, setSelectedType] = useState(searchParams.get('type') || '');
    const [selectedSpePlace, setSelectedSpePlace] = useState(searchParams.get('spePlace') || '');

    // Pagination (optional, but good structure)
    const [currentPage, setCurrentPage] = useState(parseInt(searchParams.get('pageNumber')) || 1);
    const [pageSize] = useState(10); // Or make configurable
    const [totalPages, setTotalPages] = useState(0);

    const fetchInstructionsAndFilters = useCallback(async (page = currentPage) => {
        setLoading(true);
        setError(null);
        try {
            const params = { pageNumber: page, pageSize };
            if (selectedCubeId) params.cubeIdPk = selectedCubeId;
            if (selectedType) params.type = selectedType;
            if (selectedSpePlace) params.spePlace = selectedSpePlace;

            const [instrResponse, custResponse] = await Promise.allSettled([
                getAllExploitInstructions(params),
                customers.length === 0 ? getAllCustomers({ pageSize: 1000 }) : Promise.resolve({ data: customers })
            ]);

            if (instrResponse.status === 'fulfilled' && instrResponse.value) {
                setInstructions(instrResponse.value.data || []);
                const totalItems = instrResponse.value.headers['x-pagination-totalitems'];
                const currentPgSize = instrResponse.value.headers['x-pagination-pagesize'] || pageSize;
                if (totalItems && currentPgSize) {
                    setTotalPages(Math.ceil(parseInt(totalItems) / parseInt(currentPgSize)));
                } else {
                    setTotalPages(instrResponse.value.data?.length > 0 ? Math.ceil(instrResponse.value.data.length / pageSize) : 0);
                }
            } else {
                console.error("Error fetching instructions:", instrResponse.reason);
                setError(instrResponse.reason?.message || "Failed to load instructions.");
                setInstructions([]);
            }

            if (custResponse.status === 'fulfilled' && custResponse.value) {
                setCustomers(Array.isArray(custResponse.value) ? custResponse.value : (custResponse.value.data || []));
            } else if (customers.length === 0) { // Only log error if it was a new fetch attempt
                console.error("Error fetching customers for filter:", custResponse.reason);
            }
            setCurrentPage(page);

        } catch (err) { // Should be rare with Promise.allSettled
            console.error("General error fetching data:", err);
            setError(err.message || "Failed to load data.");
            setInstructions([]);
        } finally {
            setLoading(false);
        }
    }, [selectedCubeId, selectedType, selectedSpePlace, pageSize, currentPage, customers]);

    useEffect(() => {
        const pageFromUrl = parseInt(searchParams.get('pageNumber')) || 1;
        if (pageFromUrl !== currentPage) setCurrentPage(pageFromUrl); // Sync state with URL
        fetchInstructionsAndFilters(pageFromUrl);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [selectedCubeId, selectedType, selectedSpePlace, searchParams.get('pageNumber'), pageSize]);


    const handleDelete = async (id) => {
        if (!window.confirm(`Delete Instruction ID: ${id}?`)) return;
        try {
            await apiDelete(id);
            alert(`Instruction ID: ${id} deleted.`);
            if (instructions.length === 1 && currentPage > 1) {
                handlePageChange(currentPage - 1);
            } else {
                fetchInstructionsAndFilters(currentPage);
            }
        } catch (err) {
            alert(`Error: ${err.response?.data?.message || err.message}`);
        }
    };

    const handleFilterChange = (setter, paramName, value) => {
        setter(value);
        setCurrentPage(1); // Reset to page 1 on filter change
        const newSearchParams = new URLSearchParams(searchParams);
        if (value) newSearchParams.set(paramName, value);
        else newSearchParams.delete(paramName);
        newSearchParams.set('pageNumber', '1');
        setSearchParams(newSearchParams);
    };

    const clearFilters = () => {
        setSelectedCubeId(''); setSelectedType(''); setSelectedSpePlace('');
        setCurrentPage(1);
        setSearchParams({ pageNumber: '1' });
    };

    const handlePageChange = (newPage) => {
        if (newPage >= 1 && (newPage <= totalPages || totalPages === 0)) {
            setCurrentPage(newPage);
            const newSearchParams = new URLSearchParams(searchParams);
            newSearchParams.set('pageNumber', String(newPage));
            setSearchParams(newSearchParams);
        }
    };

    return (
        <div>
            <h1>Exploit Instructions (All)</h1>
            <div className="filters" style={{ marginBottom: '20px', display: 'flex', flexWrap: 'wrap', gap: '15px', alignItems: 'center' }}>
                <div>
                    <label htmlFor="customerFilterEI" style={{ marginRight: '5px' }}>Customer:</label>
                    <select id="customerFilterEI" value={selectedCubeId} onChange={(e) => handleFilterChange(setSelectedCubeId, 'cubeIdPk', e.target.value)}>
                        <option value="">All Customers</option>
                        {customers.map(cust => <option key={cust.cube_id_pk} value={cust.cube_id_pk}>{cust.cube_name} ({cust.cube_id_pk})</option>)}
                    </select>
                </div>
                <div>
                    <label htmlFor="typeFilterEI" style={{ marginRight: '5px' }}>Type:</label>
                    <select id="typeFilterEI" value={selectedType} onChange={(e) => handleFilterChange(setSelectedType, 'type', e.target.value)}>
                        <option value="">All Types</option>
                        {getDropdownOptions(EXP_INS_TYPES).map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                    </select>
                </div>
                <div>
                    <label htmlFor="spePlaceFilterEI" style={{ marginRight: '5px' }}>Exec. Place:</label>
                    <select id="spePlaceFilterEI" value={selectedSpePlace} onChange={(e) => handleFilterChange(setSelectedSpePlace, 'spePlace', e.target.value)}>
                        <option value="">All Places</option>
                        {getDropdownOptions(EXP_INS_SPE_PLACES).map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                    </select>
                </div>
                <button onClick={clearFilters} className="secondary">Clear Filters</button>
                <button className="primary" onClick={() => navigate('/exploit-instructions/add')} style={{ marginLeft: 'auto' }}>
                    Add New Instruction
                </button>
            </div>

            <ExploitInstructionList
                instructions={instructions}
                onEdit={(instruction) => navigate(`/exploit-instructions/edit/${instruction.expInsIdPk}`)}
                onDelete={handleDelete}
                loading={loading}
                error={error?.main} // Pass main list error
            />
            {totalPages > 0 && (
                <div className="pagination-controls" style={{ marginTop: '20px', textAlign: 'center' }}>
                    <button onClick={() => handlePageChange(currentPage - 1)} disabled={currentPage === 1}>Prev</button>
                    <span> Page {currentPage} of {totalPages} </span>
                    <button onClick={() => handlePageChange(currentPage + 1)} disabled={currentPage === totalPages || totalPages === 0}>Next</button>
                </div>
            )}
        </div>
    );
}

export default ExploitInstructionListPage;