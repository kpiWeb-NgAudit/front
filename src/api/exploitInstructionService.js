// src/api/exploitInstructionService.js
import axios from 'axios';
import { BASE_URL } from '../config/apiConfig';


const API_BASE_URL = `${BASE_URL}/api/exploitinstructions`;

export const getAllExploitInstructions = async (params = {}) => {
    // params: { cubeIdPk: 'customerXYZ', type: 'ALERT', pageNumber: 1, pageSize: 10 }
    console.log("exploitInstructionService: getAllExploitInstructions called with params:", params);
    try {
        const response = await axios.get(API_BASE_URL, { params });
        return { data: response.data, headers: response.headers };
    } catch (error) {
        console.error("exploitInstructionService: Error in getAllExploitInstructions:", error.response?.data || error.message);
        throw error;
    }
};

export const getExploitInstructionById = async (id) => {
    try {
        const response = await axios.get(`${API_BASE_URL}/${id}`);
        return response.data;
    } catch (error) {
        console.error(`exploitInstructionService: Error fetching instruction ${id}:`, error.response?.data || error.message);
        throw error;
    }
};

export const createExploitInstruction = async (instructionData) => {
    const payload = { ...instructionData };
    delete payload.ExpInsTimestamp; // DTO for create doesn't have this
    delete payload.Customer; // Remove navigation prop if present

    console.log("SENDING POST PAYLOAD to /api/exploitinstructions:", JSON.stringify(payload, null, 2));
    try {
        const response = await axios.post(API_BASE_URL, payload);
        return response.data;
    } catch (error) {
        console.error("exploitInstructionService: Error creating instruction:", error.response?.data || error.message);
        throw error;
    }
};

export const updateExploitInstruction = async (id, instructionData) => {
    const payload = { ...instructionData };

    // Normalize timestamp key for DTO
    if (payload.expIns_timestamp && !payload.ExpInsTimestamp) {
        payload.ExpInsTimestamp = payload.expIns_timestamp;
    }
    delete payload.expIns_timestamp;

    if (!payload.ExpInsTimestamp) {
        console.warn("Warning: ExpInsTimestamp missing for update. Payload:", payload);
    }
    delete payload.Customer;
    delete payload.ExpInsIdPk; // PK is in URL

    console.log(`FINAL PUT PAYLOAD to /api/exploitinstructions/${id}:`, JSON.stringify(payload, null, 2));
    try {
        const response = await axios.put(`${API_BASE_URL}/${id}`, payload);
        return response.data; // Or handle 204
    } catch (error) {
        console.error(`exploitInstructionService: Error updating instruction ${id}:`, error.response?.data || error.message);
        throw error;
    }
};

export const deleteExploitInstruction = async (id) => {
    try {
        await axios.delete(`${API_BASE_URL}/${id}`);
    } catch (error) {
        console.error(`exploitInstructionService: Error deleting instruction ${id}:`, error.response?.data || error.message);
        throw error;
    }
};